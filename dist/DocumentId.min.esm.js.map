{"version":3,"sources":["DocumentId.esm.js"],"names":["_length","_charactors","_prefix","_trialLimit","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","[object Object]","length","charactorType","alphalower","alphaupper","number","symbol","prefix","trialLimit","RangeError","charactors","charactorTypeSymbol","undefined","search","charactorsLength","id","i","charAt","Math","floor","random","_getRandom","trialCount","document","getElementById","Error","WeakMap"],"mappings":"AAAA,IAaIA,EAASC,EAAaC,EAASC,EAb/BC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,EAAYC,GAClG,IAAKD,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAGxB,OADAH,EAAWI,IAAIL,EAAUE,GAClBA,GAEPI,EAA0BP,MAAQA,KAAKO,wBAA2B,SAAUN,EAAUC,GACtF,IAAKA,EAAWE,IAAIH,GAChB,MAAM,IAAII,UAAU,kDAExB,OAAOH,EAAWM,IAAIP,mBAQX,MAOXQ,YAAYC,EAAS,GAAIC,EAAgB,CACrCC,YAAY,EACZC,YAAY,EACZC,QAAQ,EACRC,OAAQ,IACTC,EAAS,GAAIC,EAAa,IAKzB,GAJAtB,EAAQW,IAAIN,UAAM,GAClBJ,EAAYU,IAAIN,UAAM,GACtBH,EAAQS,IAAIN,UAAM,GAClBF,EAAYQ,IAAIN,UAAM,GAClBU,EAAS,EACT,MAAM,IAAIQ,WAAW,6DAEzB,IAAIC,EAAa,GACbR,EAAcC,aACdO,GAAc,8BAEdR,EAAcE,aACdM,GAAc,8BAEdR,EAAcG,SACdK,GAAc,cAElB,MAAMC,EAAsBT,EAAcI,OAC1C,QAA4BM,IAAxBD,EAAmC,CACnC,IAA0C,IAAtCA,EAAoBE,OAAO,MAC3B,MAAM,IAAIJ,WAAW,8EAEzB,IAAmD,IAA/CE,EAAoBE,OAAO,eAC3B,MAAM,IAAIJ,WAAW,2EAEzBC,GAAcC,EAElB,GAAID,EAAWT,QAAU,EACrB,MAAM,IAAIQ,WAAW,iDAEzB,GAAID,EAAa,EACb,MAAM,IAAIC,WAAW,iEAEzBnB,EAAuBC,KAAML,EAASe,GACtCX,EAAuBC,KAAMJ,EAAauB,GAC1CpB,EAAuBC,KAAMH,EAASmB,GACtCjB,EAAuBC,KAAMF,EAAamB,GAO9CR,aACI,MAAMc,EAAmBhB,EAAuBP,KAAMJ,GAAac,OACnE,IAAIc,EAAK,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAuBP,KAAML,GAAU8B,IACvDD,GAAMjB,EAAuBP,KAAMJ,GAAa8B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IAEtF,OAAOC,EAOXf,WACI,IAAIe,EAAK,GAAGjB,EAAuBP,KAAMH,KAAWG,KAAK8B,eACrDC,EAAa,EACjB,KAAuC,OAAhCC,SAASC,eAAeT,IAAc,CACzC,GAAIO,GAAcxB,EAAuBP,KAAMF,GAC3C,MAAM,IAAIoC,MAAM,uJAEpBV,EAAK,GAAGjB,EAAuBP,KAAMH,KAAWG,KAAK8B,eACrDC,IAEJ,OAAOP,GAGf7B,EAAU,IAAIwC,QAAWvC,EAAc,IAAIuC,QAAWtC,EAAU,IAAIsC,QAAWrC,EAAc,IAAIqC","file":"DocumentId.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _length, _charactors, _prefix, _trialLimit;\n/**\n * Generate a unique ID in Document\n *\n * @version 1.1.0\n */\nexport default class {\n    /**\n     * @param {number} length - Length of ID (Excluding the prefix part)\n     * @param {charactorType} charactorType - Type of characters used for ID\n     * @param {string} prefix - Prefix of ID\n     * @param {number} trialLimit - Maximum number of attempts if the generated ID exists in the document\n     */\n    constructor(length = 10, charactorType = {\n        alphalower: true,\n        alphaupper: true,\n        number: true,\n        symbol: '',\n    }, prefix = '', trialLimit = 10) {\n        _length.set(this, void 0);\n        _charactors.set(this, void 0);\n        _prefix.set(this, void 0);\n        _trialLimit.set(this, void 0);\n        if (length < 1) {\n            throw new RangeError('The argument `length` must be greater than or equal to 1.');\n        }\n        let charactors = '';\n        if (charactorType.alphalower) {\n            charactors += 'abcdefghijklmnopqrstuvwxyz';\n        }\n        if (charactorType.alphaupper) {\n            charactors += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        }\n        if (charactorType.number) {\n            charactors += '0123456789';\n        }\n        const charactorTypeSymbol = charactorType.symbol;\n        if (charactorTypeSymbol !== undefined) {\n            if (charactorTypeSymbol.search(/\\s/) !== -1) {\n                throw new RangeError('The argument `charactorType.symbol` must not contain any ASCII whitespace.');\n            }\n            if (charactorTypeSymbol.search(/[a-zA-Z0-9]/) !== -1) {\n                throw new RangeError('The argument `charactorType.symbol` must not contain letter or numbers.');\n            }\n            charactors += charactorTypeSymbol;\n        }\n        if (charactors.length <= 1) {\n            throw new RangeError('ID must use at least two types of characters.');\n        }\n        if (trialLimit < 1) {\n            throw new RangeError('The argument `trialLimit` must be greater than or equal to 1.');\n        }\n        __classPrivateFieldSet(this, _length, length);\n        __classPrivateFieldSet(this, _charactors, charactors);\n        __classPrivateFieldSet(this, _prefix, prefix);\n        __classPrivateFieldSet(this, _trialLimit, trialLimit);\n    }\n    /**\n     * Generate a random string\n     *\n     * @returns {string} Value of ID\n     */\n    _getRandom() {\n        const charactorsLength = __classPrivateFieldGet(this, _charactors).length;\n        let id = '';\n        for (let i = 0; i < __classPrivateFieldGet(this, _length); i++) {\n            id += __classPrivateFieldGet(this, _charactors).charAt(Math.floor(Math.random() * charactorsLength));\n        }\n        return id;\n    }\n    /**\n     * Generate a unique ID in document\n     *\n     * @returns {string} Value of ID\n     */\n    generate() {\n        let id = `${__classPrivateFieldGet(this, _prefix)}${this._getRandom()}`;\n        let trialCount = 1;\n        while (document.getElementById(id) !== null) {\n            if (trialCount >= __classPrivateFieldGet(this, _trialLimit)) {\n                throw new Error('The number of ID generation attempts has exceeded the limit. You may be able to resolve this error by increasing the ID length or setting a prefix.');\n            }\n            id = `${__classPrivateFieldGet(this, _prefix)}${this._getRandom()}`;\n            trialCount++;\n        }\n        return id;\n    }\n}\n_length = new WeakMap(), _charactors = new WeakMap(), _prefix = new WeakMap(), _trialLimit = new WeakMap();\n"]}